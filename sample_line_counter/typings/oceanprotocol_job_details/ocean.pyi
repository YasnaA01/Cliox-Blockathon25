"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from functools import cached_property
from typing import Any, Generic, Optional, Type, TypeVar, final
from dataclasses_json import dataclass_json
from oceanprotocol_job_details.loaders.impl.files import Files

T = TypeVar("T")
@dataclass_json
@dataclass
class Credential:
    type: str
    values: list[str]
    ...


@dataclass_json
@dataclass
class Credentials:
    allow: list[Credential]
    deny: list[Credential]
    ...


@dataclass_json
@dataclass
class Container:
    image: str
    tag: str
    entrypoint: str
    ...


@dataclass_json
@dataclass
class Algorithm:
    container: Container
    language: str
    version: str
    consumerParameters: Any
    ...


@dataclass_json
@dataclass
class Metadata:
    description: str
    name: str
    type: str
    author: str
    license: str
    algorithm: Optional[Algorithm] = ...
    tags: Optional[list[str]] = ...
    created: Optional[str] = ...
    updated: Optional[str] = ...
    copyrightHolder: Optional[str] = ...
    links: Optional[list[str]] = ...
    contentLanguage: Optional[str] = ...
    categories: Optional[list[str]] = ...


@dataclass_json
@dataclass
class ConsumerParameters:
    name: str
    type: str
    label: str
    required: bool
    description: str
    default: str
    option: Optional[list[str]] = ...


@dataclass_json
@dataclass
class Service:
    id: str
    type: str
    timeout: int
    files: str
    datatokenAddress: str
    serviceEndpoint: str
    additionalInformation: Optional[str] = ...
    name: Optional[str] = ...
    description: Optional[str] = ...


@dataclass_json
@dataclass
class Event:
    tx: str
    block: int
    from_: str = ...
    contract: str
    datetime: str


@dataclass_json
@dataclass
class NFT:
    address: str
    name: str
    symbol: str
    state: int
    tokenURI: str
    owner: str
    created: str
    ...


@dataclass_json
@dataclass
class DataToken:
    address: str
    name: str
    symbol: str
    serviceId: str
    ...


@dataclass_json
@dataclass
class SimpleDataToken:
    address: str
    name: str
    symbol: str
    ...


@dataclass_json
@dataclass
class Price:
    value: int
    ...


@dataclass_json
@dataclass
class Stats:
    allocated: int
    orders: int
    price: Price
    ...


@dataclass_json
@dataclass
class Purgatory:
    state: bool
    ...


@dataclass_json
@dataclass
class AccessDetails:
    templateId: int
    publisherMarketOrderFee: str
    type: str
    addressOrId: str
    price: str
    isPurchasable: bool
    datatoken: SimpleDataToken
    ...


@dataclass_json
@dataclass
class DDO:
    id: str
    context: list[str] = ...
    nftAddress: str
    chainId: int
    version: str
    metadata: Metadata
    services: list[Service]
    credentials: Credentials
    event: Event
    nft: NFT
    datatokens: list[DataToken]
    stats: Stats
    purgatory: Purgatory
    accessDetails: AccessDetails


@final
@dataclass_json
@dataclass(frozen=True)
class JobDetails(Generic[T]):
    files: Files
    ddos: list[DDO]
    _type: Type[T] = ...
    secret: str | None = ...
    def __post_init__(self) -> None:
        ...
    
    @cached_property
    def input_parameters(self) -> T:
        """Read the input parameters and return them in an instance of the dataclass T"""
        ...
    


